package interpreter.analizador;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;

import interpreter.objects.ColumnDefinition;
import interpreter.objects.WhereStatment;

import objects.datatypes.*;
import objects.constraints.*;
import objects.select.*;

import objects.RuntimeDatabaseProcessor;

action code {:
    
    public RuntimeDatabaseProcessor linkToWorld = new RuntimeDatabaseProcessor();

    public List<ColumnDefinition> lista = new ArrayList<>();

    public List<String> listaColumnasSelect = new ArrayList<>();

    public List<SelectColumn> columnasSelect = new ArrayList<>();

    public List<String> listajoin = new ArrayList<>();

    public List<String> listaValuesInsert = new ArrayList<>();

:}

parser code {:
    //esta es la manera en que se puede acceder a un objeto que se genera durante la etapa del parsing

    @Override
    public void syntax_error(Symbol sy) {
        if (sy != null && (token)sy.value!=null)
        {
            token t=(token)sy.value;
            System.out.println("Error sintáctico cerca de \""+ t.getCadena()+"\" : [Fila "+t.getRow()+" : Columna "+t.getCol()+"]");
        }
        else
        {
            System.out.println("Error sintáctico, faltan parámetros en el comando");
        }
    }
:}

/*---------------------------------TERMINALES------------------------------*/

terminal MAYOR, MENOR, IGUAL, ABRIRPAR, ASTERISCO, CERRARPAR, COMA, PUNTOCOMA, 
NEWLINE;

terminal CREATE, DATABASE, DROP, LIST, DATABASES, START, GET, STATUS, STOP,
DISPLAY, SET, TABLE, AS, INTEGER, DECIMAL, CHAR, VARCHAR, DATETIME, NULL, NOT, 
PRIMARY, KEY, ALTER, ADD, CONSTRAINT, FOREIGN, REFERENCES, INDEX, ON, 
SELECT, FROM, WHERE, GROUP, BY, JOIN, LIKE, IS, COUNT, AVERAGE, MIN, MAX, 
UPDATE, DELETE, INSERT, INTO, VALUES;


terminal token NUM, PALABRA, ID, DEC;

/*-------------------------------NO TERMINALES----------------------------*/

non terminal programa, clpcommands, ddlcommands, dmlcommands, columndefinition,
columnlist, valueslist, joinstatment, joinstatment2, value, selectionlist2, 
selectionlist, valueslist2;

non terminal ColumnDefinition column;

non terminal String primarykey, nullability, compareoperator, groupby, wherevalues;

non terminal ForeignKey constraintdefinition;

non terminal AggregateFunction aggregatefunctions;

non terminal WhereStatment where;

non terminal DataType type;

precedence left COMA;

/*-------------------------------GRAMATICAS-------------------------------*/
start with programa;

programa                ::=     clpcommands
                                | ddlcommands
                                | dmlcommands;

clpcommands             ::=     CREATE DATABASE ID:a 
                                {:
                                    linkToWorld.createDatabase(a.getCadena());
                                :}
                                | DROP DATABASE ID:a
                                {:
                                    linkToWorld.dropDatabase(a.getCadena());
                                :}
                                | LIST DATABASES
                                {:
                                    linkToWorld.listDatabases();
                                :}
                                | START
                                {:
                                    linkToWorld.start();
                                :}
                                | GET STATUS
                                {:
                                    linkToWorld.getStatus();
                                :}
                                | STOP
                                {:
                                    linkToWorld.stop();
                                :}
                                | DISPLAY DATABASE ID:a
                                {:
                                    linkToWorld.displayDatabase(a.getCadena());
                                :};

ddlcommands             ::=     SET DATABASE ID:a
                                {:
                                    linkToWorld.setDatabase(a.getCadena());
                                :}
                                | CREATE TABLE ID:a AS 
                                    ABRIRPAR columndefinition COMA
                                    primarykey:c CERRARPAR PUNTOCOMA
                                {:
                                    linkToWorld.createTable(a.getCadena(), c, lista);
                                :}
                                | CREATE TABLE error
                                {:
                                    System.out.println("error en el comando de crear tabla");
                                :}
                                | ALTER TABLE ID:a ADD CONSTRAINT constraintdefinition:b
                                {:
                                    linkToWorld.alterTable(a.getCadena(), b);
                                :}
                                | DROP TABLE ID:a
                                {:
                                    linkToWorld.dropTable(a.getCadena());
                                :}
                                | CREATE INDEX ID:a ON ID:b 
                                    ABRIRPAR ID:c CERRARPAR
                                {:
                                    linkToWorld.createIndex(a.getCadena(),
                                                            b.getCadena(),
                                                            c.getCadena());
                                :};

columndefinition        ::=     columndefinition:a COMA column:b
                                {:
                                    lista.add(b);
                                :}
                                | column:a
                                {:
                                    lista.add(a);
                                :};

column                  ::=     ID:a type:b nullability:c
                                {:
                                    Boolean nulo = c.equals("1") ? true : false;
                                    RESULT = new ColumnDefinition (a.getCadena(),b, nulo);
                                :};

type                    ::=     INTEGER
                                {:
                                    RESULT = new URSQL_Integer();
                                :}
                                | DECIMAL ABRIRPAR 
                                    NUM:a COMA NUM:b CERRARPAR
                                {:
                                    RESULT = new URSQL_Decimal(
                                        a.getEntero(),
                                        b.getEntero());
                                :}
                                | CHAR ABRIRPAR NUM:a CERRARPAR
                                {:
                                    RESULT = new URSQL_Char(a.getEntero());
                                :}
                                | VARCHAR
                                {:
                                    RESULT = new URSQL_Varchar();
                                :}
                                | DATETIME
                                {:
                                    RESULT = new URSQL_Datetime();
                                :};

nullability             ::=     NULL
                                {:
                                    RESULT = "1";
                                :}
                                | NOT NULL
                                {:
                                    RESULT = "0";
                                :};

primarykey              ::=     PRIMARY KEY ABRIRPAR ID:a CERRARPAR
                                {:
                                   RESULT = a.getCadena();
                                :};

constraintdefinition    ::=     FOREIGN KEY ID:a REFERENCES ID:b 
                                    ABRIRPAR ID:c CERRARPAR
                                {:
                                    RESULT = new ForeignKey (
                                                                a.getCadena(),
                                                                b.getCadena(),
                                                                c.getCadena()
                                                            );
                                :};

dmlcommands             ::=     SELECT selectionlist
                                    FROM ID:c joinstatment where:e groupby:f
                                {:
                                    linkToWorld.select( columnasSelect,
                                                        c.getCadena(),
                                                        listajoin,
                                                        e,
                                                        f);
                                :}
                                | UPDATE ID:a SET ID:b IGUAL PALABRA:c 
                                    where:d
                                {:
                                    linkToWorld.update( a.getCadena(),
                                                        b.getCadena(),
                                                        c.getCadena(),d);
                                :}
                                | DELETE FROM ID:a 
                                    where:b
                                {:
                                    linkToWorld.delete( a.getCadena(),b);
                                :}
                                | INSERT INTO ID:a 
                                    ABRIRPAR columnlist CERRARPAR 
                                    VALUES ABRIRPAR valueslist CERRARPAR
                                {:
                                    linkToWorld.insertInto( a.getCadena(),
                                                            listaColumnasSelect,
                                                            listaValuesInsert);
                                :}
;

selectionlist           ::=     ASTERISCO
                                | selectionlist2;

selectionlist2          ::=     selectionlist2 COMA ID:a
                                {:
                                    Column columna = new Column (a.getCadena(), 1);
                                    columnasSelect.add(columna);
                                :}
                                | selectionlist2 COMA aggregatefunctions:a
                                {:
                                    columnasSelect.add(a);
                                :}
                                | ID:a
                                {:
                                    Column columna = new Column (a.getCadena(), 1);
                                    columnasSelect.add(columna);
                                :}
                                | aggregatefunctions:a
                                {:
                                    columnasSelect.add(a);
                                :};

columnlist              ::=     columnlist COMA ID:a
                                {:
                                    listaColumnasSelect.add(a.getCadena());
                                :}
                                | ID:a
                                {:
                                    listaColumnasSelect.add(a.getCadena());
                                :};

valueslist              ::=     value valueslist2;

valueslist2             ::=     COMA valueslist
                                | ;

value                  ::=      ID:a
                                {:
                                    listaValuesInsert.add(a.getCadena());
                                :}
                                | PALABRA:a
                                {:
                                    listaValuesInsert.add(a.getCadena().replaceAll("\"", ""));
                                :}
                                | NUM:a
                                {:
                                    listaValuesInsert.add(a.getCadena());
                                :};

aggregatefunctions      ::=     COUNT ABRIRPAR ID:a CERRARPAR
                                {:
                                    AggregateFunction function = new 
                                        AggregateFunction (a.getCadena(), 1, 2);
                                    RESULT = function;
                                :}
                                | AVERAGE ABRIRPAR ID:a CERRARPAR
                                {:
                                    AggregateFunction function = new 
                                        AggregateFunction (a.getCadena(), 2, 2);
                                    RESULT = function;
                                :}
                                | MIN ABRIRPAR ID:a CERRARPAR
                                {:
                                    AggregateFunction function = new 
                                        AggregateFunction (a.getCadena(), 3, 2);
                                    RESULT = function;
                                :}
                                | MAX ABRIRPAR ID:a CERRARPAR
                                {:
                                    AggregateFunction function = new 
                                        AggregateFunction (a.getCadena(), 4, 2);
                                    RESULT = function;
                                :};

joinstatment            ::=     joinstatment2
                                |;

joinstatment2           ::=     joinstatment2 JOIN ID:b
                                {:
                                    listajoin.add(b.getCadena());
                                :}
                                | JOIN ID:a
                                {:
                                    listajoin.add(a.getCadena());
                                :};

where                   ::=     WHERE ID:a compareoperator:b wherevalues:c
                                {:
                                    RESULT = new WhereStatment (  a.getCadena(),
                                                                b, 
                                                                c);
                                :}
                                |
                                {:
                                    RESULT = null;
                                :};

wherevalues             ::=     ID:a
                                {:
                                    RESULT = a.getCadena();
                                :}
                                | PALABRA:a
                                {:
                                    RESULT = a.getCadena().replaceAll("\"", "");
                                :}
                                | NUM:a
                                {:
                                    RESULT = a.getCadena();
                                :}
                                | DEC:a
                                {:
                                    RESULT = a.getCadena();
                                :};

compareoperator         ::=     MAYOR
                                {:
                                    RESULT = ">";
                                :}
                                | MENOR
                                {:
                                    RESULT = "<";
                                :}
                                | IGUAL
                                {:
                                    RESULT = "=";
                                :}
                                | LIKE
                                {:
                                    RESULT = "like";
                                :}
                                | NOT
                                {:
                                    RESULT = "not";
                                :}
                                | IS NULL
                                {:
                                    RESULT = "is null";
                                :}
                                | IS NOT NULL
                                {:
                                    RESULT = "is not null";
                                :};

groupby                 ::=     GROUP BY ID:a
                                {:
                                    RESULT = a.getCadena();
                                :}
                                |
                                {:
                                    RESULT = "";
                                :};
